{"version":3,"sources":["constants/helper.ts","components/Website.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_recipes","Object","keys","itemList","recipes","forEach","key","value","push","allItemNames","map","item","name","idToName","localized_name","en","nameToId","smeltItemsArray","recipe","category","smeltItems","Set","ingredients","length","ingredient","add","filter","union","setA","setB","_union","elem","isSuperset","set","subset","has","generateItemsFrom","availableItems","allowSmelting","availableItemsSet","newItems","oldLength","size","iteration","Website","props","useState","setAllowSmelting","Array","fill","inputItems","setInputItems","ignoreItems","setIgnoreItems","inputHtml","ignoreHtml","i","className","htmlFor","id","list","onChange","e","slice","target","items1","items2","differenceItems","_difference","delete","difference","output","from","sort","outputHtml","itemName","datalist","rel","href","type","checked","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAEIA,EAAkB,GACtBC,OAAOC,KAAKC,EAASC,SAASC,SAAQ,SAACC,GAEnC,IAAIC,EAAQJ,EAASC,QAAQE,GAC7BN,EAASQ,KAAKD,MAGX,IAAIE,EAAeT,EAASU,KAAI,SAACC,GACpC,OAAOA,EAAKC,QAELC,EAAW,GACtBb,EAASK,SAAQ,SAACM,GAEdE,EAASF,EAAKC,MAAQD,EAAKG,eAAeC,MAEvC,IAAIC,EAAW,GACtBhB,EAASK,SAAQ,SAACM,GAEdK,EAASL,EAAKG,eAAeC,IAAMJ,EAAKC,QAG5C,IAAIK,EAA4B,GAChCjB,EAASK,SAAQ,SAACa,GACU,aAApBA,EAAOC,UACPF,EAAgBT,KAAKU,EAAON,SAIpC,IAAIQ,EAAa,IAAIC,IAAIJ,GAGdb,EAAUJ,EAChBU,KAAI,SAACC,GACF,IAAIW,EAAc,IAAID,IACtB,OAAIV,EAAKW,YAAYC,OAAS,GAC1BZ,EAAKW,YAAYjB,SAAQ,SAACmB,GACtBF,EAAYG,IAAID,EAAWZ,SAExB,eAAGD,EAAKC,KAAOU,IAEnB,QAEVI,QAAO,SAACf,GACL,OAAOA,KAGXgB,EAAQ,SAACC,EAAmBC,GAC5B,IAD+D,EAC3DC,EAAS,IAAIT,IAAIO,GAD0C,cAE9CC,GAF8C,IAE/D,2BAAuB,CAAC,IAAfE,EAAc,QACnBD,EAAOL,IAAIM,IAHgD,8BAK/D,OAAOD,GAGPE,EAAa,SAACC,EAAkBC,GAAkC,IAAD,gBAChDA,GADgD,IACjE,2BAAyB,CAAC,IAAjBH,EAAgB,QACrB,IAAKE,EAAIE,IAAIJ,GACT,OAAO,GAHkD,8BAMjE,OAAO,GAWAK,EAAoB,SAACC,GAK5B,IAL2F,IAArCC,EAAoC,wDACtFC,EAAoB,IAAIlB,IAAIgB,GAC5BG,EAAwB,IAAInB,IAC5BoB,EAAYD,EAASE,KACrBC,EAAY,EACK,IAAdA,GAAmBH,EAASE,OAASD,GACxCE,GAAa,EACbF,EAAYD,EAASE,KACrBH,EAAoBZ,EAAMY,EAAmBC,GAE7CpC,EAAQC,SAAQ,SAACM,GAEb,IAAIL,EAAcL,OAAOC,KAAKS,GAAM,GACpC,GAAK2B,IAAiBlB,EAAWe,IAAI7B,GAArC,CAIA,IAAIC,EAAqBI,EAAKL,GAC1B0B,EAAWO,EAAmBhC,IAC9BiC,EAASf,IAAInB,OAIzB,OAAO,YAAIkC,ICvFA,SAASI,EAAQC,GAW5B,IAXyC,IAAD,EACAC,oBAAS,GADT,mBACnCR,EADmC,KACpBS,EADoB,OAEND,mBAASE,MAAM,IAAIC,KAAK,KAFlB,mBAEnCC,EAFmC,KAEvBC,EAFuB,OAGJL,mBAASE,MAAM,IAAIC,KAAK,KAHpB,mBAGnCG,EAHmC,KAGtBC,EAHsB,KASpCC,EAAY,GACZC,EAAa,GAVuB,WAW/BC,GACLF,EAAU9C,KACN,wBAAyBiD,UAAW,uBAAwBC,QAAO,eAAUF,GAA7E,mBACWA,EAAI,IADf,eAAoBA,KAIxBF,EAAU9C,KACN,uBACIiD,UAAW,iCAEXE,GAAE,eAAUH,GACZI,KAAM,QACNrD,MAAO2C,EAAWM,GAClBK,SAAU,SAACC,GACPX,EAAc,GAAD,mBACND,EAAWa,MAAM,EAAGP,IADd,CAETM,EAAEE,OAAOzD,OAFA,YAGN2C,EAAWa,MAAMP,EAAI,QAVpC,eAEiBA,KAarBD,EAAW/C,KACP,wBAA+BiD,UAAW,uBAAwBC,QAAO,eAAUF,GAAnF,mBACWA,EAAI,IADf,qBAA0BA,KAI9BD,EAAW/C,KACP,uBACIiD,UAAW,iCAEXE,GAAE,qBAAgBH,GAClBI,KAAM,QACNrD,MAAO6C,EAAYI,GACnBK,SAAU,SAACC,GACPT,EAAe,GAAD,mBACPD,EAAYW,MAAM,EAAGP,IADd,CAEVM,EAAEE,OAAOzD,OAFC,YAGP6C,EAAYW,MAAMP,EAAI,QAVrC,qBAEuBA,MA9BtBA,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GA6CT,IAAIS,EAAS7B,EACTc,EAAWxC,KAAI,SAACC,GAEZ,OAAOK,EAASL,MAEpB2B,GAEA4B,EAAS9B,EACTgB,EAAY1C,KAAI,SAACC,GAEb,OAAOK,EAASL,MAEpB2B,GAEA6B,EDdgB,SAACvC,EAAmBC,GACxC,IAD2E,EACvEuC,EAAc,IAAI/C,IAAIO,GADiD,cAE1DC,GAF0D,IAE3E,2BAAuB,CAAC,IAAfE,EAAc,QACnBqC,EAAYC,OAAOtC,IAHoD,8BAK3E,OAAOqC,ECS4BE,CAAW,IAAIjD,IAAI4C,GAAS,IAAI5C,IAAI6C,IACnEK,EAASvB,MAAMwB,KAAKL,GACxBI,EAAOE,OACP,IAAIC,EAAaH,EAAO7D,KAAI,SAACiE,GACzB,OACI,qBAAKlB,UAAW,2BAAhB,SAGQ5C,EAAS8D,IAHgCA,MASrDC,EACA,0BAAUjB,GAAI,QAAd,SACKlD,EAAaC,KAAI,SAACC,GACf,OACI,wBAEIJ,MAEIM,EAASF,IAHRA,QAWzB,OACI,gCACI,qBAAK8C,UAAW,cAAhB,SACI,mBACIA,UAAW,0DACXO,OAAO,SACPa,IAAI,aACJC,KAAK,qDAJT,2BASJ,sBAAKrB,UAAW,+BAAhB,UACI,gCACI,sBAAKA,UAAW,SAAhB,UACI,qBAAKA,UAAW,oBAAhB,yBACA,uBACIE,GAAG,gBACHoB,KAAM,WACNC,QAAS1C,EACTuB,SAAU,SAACC,GACPf,EAAiBe,EAAEE,OAAOgB,YAGlC,uBAAOtB,QAAS,gBAAhB,gCAEJ,qBAAKD,UAAW,mCAAhB,SAAqDH,IACrD,qBAAKG,UAAW,oBAAhB,uEAGA,qBAAKA,UAAW,mCAAhB,SAAqDF,OAEzD,gCACI,qBAAKE,UAAW,oBAAhB,qDAGCiB,KAEJE,QC5IFK,MAJf,WACI,OAAO,cAACrC,EAAD,KCQSsC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.680fe206.chunk.js","sourcesContent":["// From: https://github.com/KirkMcDonald/kirkmcdonald.github.io/blob/master/data/vanilla-1.0.0.json\nimport itemList from \"./itemlist.json\"\nlet _recipes: any[] = []\nObject.keys(itemList.recipes).forEach((key) => {\n    // @ts-ignore\n    let value = itemList.recipes[key]\n    _recipes.push(value)\n})\n\nexport let allItemNames = _recipes.map((item) => {\n    return item.name\n})\nexport let idToName = {}\n_recipes.forEach((item) => {\n    // @ts-ignore\n    idToName[item.name] = item.localized_name.en\n})\nexport let nameToId = {}\n_recipes.forEach((item) => {\n    // @ts-ignore\n    nameToId[item.localized_name.en] = item.name\n})\n\nlet smeltItemsArray: string[] = []\n_recipes.forEach((recipe) => {\n    if (recipe.category === \"smelting\") {\n        smeltItemsArray.push(recipe.name)\n    }\n})\n\nlet smeltItems = new Set(smeltItemsArray)\n// let smeltItems = new Set([\"iron-plate\", \"steel-plate\", \"copper-plate\", \"stone-brick\"])\n\nexport let recipes = _recipes\n    .map((item) => {\n        let ingredients = new Set()\n        if (item.ingredients.length > 0) {\n            item.ingredients.forEach((ingredient: { name: unknown }) => {\n                ingredients.add(ingredient.name)\n            })\n            return { [item.name]: ingredients }\n        }\n        return null\n    })\n    .filter((item) => {\n        return item\n    })\n\nlet union = (setA: Set<string>, setB: Set<string>): Set<string> => {\n    let _union = new Set(setA)\n    for (let elem of setB) {\n        _union.add(elem)\n    }\n    return _union\n}\n\nlet isSuperset = (set: Set<string>, subset: Set<string>): boolean => {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false\n        }\n    }\n    return true\n}\n\nexport let difference = (setA: Set<string>, setB: Set<string>): Set<string> => {\n    let _difference = new Set(setA)\n    for (let elem of setB) {\n        _difference.delete(elem)\n    }\n    return _difference\n}\n\nexport let generateItemsFrom = (availableItems: string[], allowSmelting = false): string[] => {\n    let availableItemsSet = new Set(availableItems)\n    let newItems: Set<string> = new Set()\n    let oldLength = newItems.size\n    let iteration = 0\n    while (iteration === 0 || newItems.size !== oldLength) {\n        iteration += 1\n        oldLength = newItems.size\n        availableItemsSet = union(availableItemsSet, newItems)\n        // eslint-disable-next-line no-loop-func\n        recipes.forEach((item) => {\n            // @ts-ignore\n            let key: string = Object.keys(item)[0]\n            if (!allowSmelting && smeltItems.has(key)) {\n                return\n            }\n            // @ts-ignore\n            let value: Set<string> = item[key]\n            if (isSuperset(availableItemsSet, value)) {\n                newItems.add(key)\n            }\n        })\n    }\n    return [...newItems]\n}\n","import {\n    allItemNames,\n    generateItemsFrom,\n    idToName,\n    nameToId,\n    difference,\n} from \"../constants/helper\"\nimport React, { useState } from \"react\"\n\nexport default function Website(props: any) {\n    let [allowSmelting, setAllowSmelting] = useState(false)\n    let [inputItems, setInputItems] = useState(Array(10).fill(\"\"))\n    let [ignoreItems, setIgnoreItems] = useState(Array(10).fill(\"\"))\n\n    // console.log(allItemNames)\n    // console.log(idToName)\n    // console.log(nameToId)\n    // console.log(recipes)\n    let inputHtml = []\n    let ignoreHtml = []\n    for (let i = 0; i < 10; i++) {\n        inputHtml.push(\n            <label key={`label${i}`} className={\"my-1 mx-4 col-span-2\"} htmlFor={`input${i}`}>\n                Input {i + 1}\n            </label>\n        )\n        inputHtml.push(\n            <input\n                className={\"bg-blue-200 rounded col-span-3\"}\n                key={`input${i}`}\n                id={`input${i}`}\n                list={\"items\"}\n                value={inputItems[i]}\n                onChange={(e) => {\n                    setInputItems([\n                        ...inputItems.slice(0, i),\n                        e.target.value,\n                        ...inputItems.slice(i + 1),\n                    ])\n                }}\n            />\n        )\n        ignoreHtml.push(\n            <label key={`ignorelabel${i}`} className={\"my-1 mx-4 col-span-2\"} htmlFor={`input${i}`}>\n                Input {i + 1}\n            </label>\n        )\n        ignoreHtml.push(\n            <input\n                className={\"bg-blue-200 rounded col-span-3\"}\n                key={`ignoreinput${i}`}\n                id={`ignoreinput${i}`}\n                list={\"items\"}\n                value={ignoreItems[i]}\n                onChange={(e) => {\n                    setIgnoreItems([\n                        ...ignoreItems.slice(0, i),\n                        e.target.value,\n                        ...ignoreItems.slice(i + 1),\n                    ])\n                }}\n            />\n        )\n    }\n\n    let items1 = generateItemsFrom(\n        inputItems.map((item) => {\n            // @ts-ignore\n            return nameToId[item]\n        }),\n        allowSmelting\n    )\n    let items2 = generateItemsFrom(\n        ignoreItems.map((item) => {\n            // @ts-ignore\n            return nameToId[item]\n        }),\n        allowSmelting\n    )\n    let differenceItems: Set<string> = difference(new Set(items1), new Set(items2))\n    let output = Array.from(differenceItems)\n    output.sort()\n    let outputHtml = output.map((itemName) => {\n        return (\n            <div className={\"bg-blue-200 rounded my-2\"} key={itemName}>\n                {\n                    // @ts-ignore\n                    idToName[itemName]\n                }\n            </div>\n        )\n    })\n\n    let datalist = (\n        <datalist id={\"items\"}>\n            {allItemNames.map((item) => {\n                return (\n                    <option\n                        key={item}\n                        value={\n                            // @ts-ignore\n                            idToName[item]\n                        }\n                    />\n                )\n            })}\n        </datalist>\n    )\n\n    return (\n        <div>\n            <div className={\"text-center\"}>\n                <a\n                    className={\"text-center text-lg font-bold hover:bg-blue-300 rounded\"}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    href=\"https://github.com/BurnySc2/factorio-items-used-in\"\n                >\n                    Source code\n                </a>\n            </div>\n            <div className={\"grid grid-cols-2 m-4 gap-x-4\"}>\n                <div>\n                    <div className={\"m-auto\"}>\n                        <div className={\"text-xl font-bold\"}>Ingredients</div>\n                        <input\n                            id=\"allowSmelting\"\n                            type={\"checkbox\"}\n                            checked={allowSmelting}\n                            onChange={(e) => {\n                                setAllowSmelting(e.target.checked)\n                            }}\n                        />\n                        <label htmlFor={\"allowSmelting\"}>Allow smelting?</label>\n                    </div>\n                    <div className={\"grid grid-cols-5 gap-x-2 gap-y-1\"}>{inputHtml}</div>\n                    <div className={\"text-xl font-bold\"}>\n                        Items made from purely these ingedients should be ignored\n                    </div>\n                    <div className={\"grid grid-cols-5 gap-x-2 gap-y-1\"}>{ignoreHtml}</div>\n                </div>\n                <div>\n                    <div className={\"text-xl font-bold\"}>\n                        Items that can be made from ingredients\n                    </div>\n                    {outputHtml}\n                </div>\n                {datalist}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport Website from \"./components/Website\"\n\nfunction App() {\n    return <Website />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}