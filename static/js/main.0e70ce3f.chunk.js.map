{"version":3,"sources":["constants/helper.ts","components/Website.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["allItemNames","itemList","map","item","id","idToName","forEach","name","nameToId","recipes","ingredients","Set","recipe","length","ingredient","add","filter","union","setA","setB","_union","elem","isSuperset","set","subset","has","smeltItems","Website","props","useState","allowSmelting","setAllowSmelting","Array","fill","inputItems","setInputItems","inputHtml","i","push","className","htmlFor","list","value","onChange","e","console","log","target","slice","output","from","availableItems","availableItemsSet","newItems","oldLength","size","iteration","key","Object","keys","generateItemsFrom","sort","outputHtml","itemName","datalist","rel","href","type","checked","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e70ce3f.chunk.js","sourcesContent":["import itemList from \"./itemlist.json\"\n\nexport let allItemNames = itemList.map((item) => {\n    return item.id\n})\nexport let idToName = {}\nitemList.forEach((item) => {\n    // @ts-ignore\n    idToName[item.id] = item.name\n})\nexport let nameToId = {}\nitemList.forEach((item) => {\n    // @ts-ignore\n    nameToId[item.name] = item.id\n})\n\nexport let recipes = itemList\n    .map((item) => {\n        let ingredients = new Set()\n        if (item.recipe.ingredients.length > 0) {\n            item.recipe.ingredients.forEach((ingredient) => {\n                ingredients.add(ingredient.id)\n            })\n            return { [item.id]: ingredients }\n        }\n        return null\n    })\n    .filter((item) => {\n        return item\n    })\n\nfunction union(setA: Set<string>, setB: Set<string>): Set<string> {\n    let _union = new Set(setA)\n    for (let elem of setB) {\n        _union.add(elem)\n    }\n    return _union\n}\n\nfunction isSuperset(set: Set<string>, subset: Set<string>): boolean {\n    for (let elem of subset) {\n        if (!set.has(elem)) {\n            return false\n        }\n    }\n    return true\n}\n\nlet smeltItems = new Set([\"iron-plate\", \"steel-plate\", \"copper-plate\", \"stone-brick\"])\n\nexport let generateItemsFrom = (availableItems: string[], allowSmelting = false): string[] => {\n    let availableItemsSet = new Set(availableItems)\n    let newItems: Set<string> = new Set()\n    let oldLength = newItems.size\n    let iteration = 0\n    while (iteration === 0 || newItems.size !== oldLength) {\n        iteration += 1\n        oldLength = newItems.size\n        availableItemsSet = union(availableItemsSet, newItems)\n        // eslint-disable-next-line no-loop-func\n        recipes.forEach((item) => {\n            // @ts-ignore\n            let key: string = Object.keys(item)[0]\n            if (!allowSmelting && smeltItems.has(key)) {\n                return\n            }\n            // @ts-ignore\n            let value: Set<string> = item[key]\n            if (isSuperset(availableItemsSet, value)) {\n                newItems.add(key)\n            }\n        })\n    }\n    return [...newItems]\n}\n","import { allItemNames, generateItemsFrom, idToName, nameToId } from \"../constants/helper\"\nimport React, { useState } from \"react\"\n\nexport default function Website(props: any) {\n    let [allowSmelting, setAllowSmelting] = useState(false)\n    let [inputItems, setInputItems] = useState(Array(20).fill(\"\"))\n\n    let inputHtml = []\n    for (let i = 0; i < 20; i++) {\n        inputHtml.push(\n            <label key={`label${i}`} className={\"my-1 mx-4 col-span-2\"} htmlFor={`input${i}`}>\n                Input {i + 1}\n            </label>\n        )\n        inputHtml.push(\n            <input\n                className={\"bg-blue-200 rounded col-span-3\"}\n                key={`input${i}`}\n                id={`input${i}`}\n                list={\"items\"}\n                value={inputItems[i]}\n                onChange={(e) => {\n                    console.log(e.target.value)\n                    setInputItems([\n                        ...inputItems.slice(0, i),\n                        e.target.value,\n                        ...inputItems.slice(i + 1),\n                    ])\n                }}\n            />\n        )\n    }\n    let output = Array.from(\n        generateItemsFrom(\n            inputItems.map((item) => {\n                // @ts-ignore\n                return nameToId[item]\n            }),\n            allowSmelting\n        )\n    )\n    output.sort()\n    let outputHtml = output.map((itemName) => {\n        return (\n            <div className={\"bg-blue-200 rounded my-2\"} key={itemName}>\n                {\n                    // @ts-ignore\n                    idToName[itemName]\n                }\n            </div>\n        )\n    })\n\n    let datalist = (\n        <datalist id={\"items\"}>\n            {allItemNames.map((item) => {\n                return (\n                    <option\n                        key={item}\n                        value={\n                            // @ts-ignore\n                            idToName[item]\n                        }\n                    />\n                )\n            })}\n        </datalist>\n    )\n\n    return (\n        <div>\n            <div className={\"text-center\"}>\n                <a\n                    className={\"text-center text-lg font-bold hover:bg-blue-300 rounded\"}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                    href=\"https://github.com/BurnySc2/factorio-items-used-in\"\n                >\n                    Source code\n                </a>\n            </div>\n            <div className={\"grid grid-cols-2 m-4 gap-x-4\"}>\n                <div>\n                    <div className={\"m-auto\"}>\n                        <div className={\"text-xl font-bold\"}>Ingredients</div>\n                        <input\n                            id=\"allowSmelting\"\n                            type={\"checkbox\"}\n                            checked={allowSmelting}\n                            onChange={(e) => {\n                                setAllowSmelting(e.target.checked)\n                            }}\n                        />\n                        <label htmlFor={\"allowSmelting\"}>Allow smelting?</label>\n                    </div>\n                    <div className={\"grid grid-cols-5 gap-x-2 gap-y-1\"}>{inputHtml}</div>\n                </div>\n                <div>\n                    <div className={\"text-xl font-bold\"}>\n                        Items that can be made from ingredients\n                    </div>\n                    {outputHtml}\n                </div>\n                {datalist}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\"\nimport Website from \"./components/Website\"\n\nfunction App() {\n    return <Website />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\")\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\")\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\")\n        })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}